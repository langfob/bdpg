% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/biodivprobgen_utilities.R
\name{vn}
\alias{vn}
\title{Validate input as boolean and replace with default on empty input if desired}
\usage{
vn(var_value, range_lo = -Inf, range_hi = Inf, bounds_types = "ii",
  def_on_empty = FALSE, def = 0, treat_NULL_as_empty = TRUE,
  treat_NA_as_empty = TRUE)
}
\arguments{
\item{var_value}{the value to be checked to see if it's a numeric in range}

\item{range_lo}{the lower bound of the range to see if input value falls in}

\item{range_hi}{the upper bound of the range to see if input value falls in}

\item{bounds_types}{a 2 character string indicating whether the lower and
upper bounds are inclusive or exclusive bounds, with 'i' meaning
inclusive and 'e' meaning exclusive; legal strings are "ii", "ie", "ei",
and "ee"}

\item{def_on_empty}{boolean flag indicating whether to return a default
value instead of the input value when the input value is empty (where
empty is defined by other flags below)}

\item{def}{a TRUE or FALSE default value to return instead of the input value
when a default is requested}

\item{treat_NULL_as_empty}{a boolean flag set to TRUE if a NULL input is to
be treated as an empty input; FALSE otherwise}

\item{treat_NA_as_empty}{a boolean flag set to TRUE if an NA input is to
be treated as an empty input; FALSE otherwise}
}
\value{
Returns the input value if it is numeric and in range or, returns a
    specified numeric value if other arguments force a valid default
    value to return; otherwise, throws an error
}
\description{
This function is intended to be a more flexible replacement for calling
is.numeric().  In particular, it makes it possible to replace empty values
with a default value (e.g., 0) and to define whether NULL and/or NA
are treated as empty values.  It also allows checking whether the input
(or a resulting default) value falls in a given range.  If no range is
specified, then any numeric value is allowed.  It also allows specification
of whether the bounds represent an open, closed, or semi-closed interval
through the bounds_type argument.  That argument is a 2 character string
composed of any combination of 'i' and 'e' to designate whether the bounds
are inclusive or exclusive.  The first character of the string is for the
lower bound and the second is for the upper bound, e.g., if the string is
"ei", then the function will check whether the value is strictly > the
lower bound and <= to the upper bound.
}
