% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gscp_10c_build_adj_and_cooccurrence_matrices.R
\name{verify_that_generated_solution_really_is_a_solution}
\alias{verify_that_generated_solution_really_is_a_solution}
\title{Verify that solution does cover all species}
\usage{
verify_that_generated_solution_really_is_a_solution(bpm, dependent_node_IDs,
  num_spp, num_PUs, PU_costs, bdpg_error_codes)
}
\arguments{
\item{bpm}{bipartite matrix; integer matrix with one row for each species
and one column for each planning unit.  Each matrix entry specifies
whether that species occupies that planning unit; 1 indicates the
species does occupy the planning unit and 0 indicates it does not.
Same as occ_matrix.}

\item{dependent_node_IDs}{integer vector of IDs of planning units contained
in a constructed correct solution to a Xu problem}

\item{num_spp}{integer number of species in the problem}

\item{num_PUs}{integer number of planning units}

\item{PU_costs}{numeric vector of planning unit costs}

\item{bdpg_error_codes}{list of error names and corresponding error codes}
}
\value{
Returns TRUE if given solution does cover all species targets;
    quits otherwise
}
\description{
Theoretically, this should not be necessary, but checking it here to
 make sure that the implementation is working correctly.
 Correct solutions will have every species attaining a representation
 fraction of their target of at least 1 (where 1 means exactly meeting
 their target).
}
\section{Local Variable Structures and examples}{

Here is the output of str() for each variable visible in the function.
Note that the particular counts and values given are just examples to show
what the data might look like.

\subsection{bdpg_error_codes}{
\preformatted{
bdpg_error_codes : List of 6
 $ ERROR_STATUS_num_inside_or_within_group_links_less_than_one: num 1001
 $ ERROR_STATUS_optimal_solution_is_not_optimal               : num 1002
 $ ERROR_STATUS_num_nodes_per_group_must_be_at_least_2        : num 1003
 $ ERROR_STATUS_duplicate_spp_in_Xu_input_file                : num 1004
 $ ERROR_STATUS_unknown_spp_occ_FP_error_type                 : num 1005
 $ ERROR_STATUS_unknown_spp_occ_FN_error_type                 : num 1006
}}
\subsection{bpm}{
\preformatted{
bpm :  num [1:814, 1:122] 1 0 0 0 0 0 0 0 0 0 ...
}}
\subsection{dependent_node_IDs}{
\preformatted{
dependent_node_IDs :  int [1:61] 2 4 6 8 10 12 14 16 18 20 ...
}}
\subsection{num_PUs}{
\preformatted{
num_PUs :  int 122
}}
\subsection{num_spp}{
\preformatted{
num_spp :  int 814
}}
\subsection{PU_costs}{
\preformatted{
PU_costs :  num [1:122] 1 1 1 1 1 1 1 1 1 1 ...
}}
\subsection{solution_cost}{
\preformatted{
solution_cost :  num 61
}}
\subsection{spp_rep_fracs}{
\preformatted{
spp_rep_fracs :  num [1:814] 1 1 1 1 1 1 1 1 1 1 ...
}}
\subsection{spp_rep_targets}{
\preformatted{
spp_rep_targets :  num [1:814] 1 1 1 1 1 1 1 1 1 1 ...
}}
\subsection{unmet_spp_rep_frac_indices}{
\preformatted{
unmet_spp_rep_frac_indices :  int(0)
}}
}

