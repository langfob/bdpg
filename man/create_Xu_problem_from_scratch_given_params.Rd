% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gen_single_bdprob.R
\name{create_Xu_problem_from_scratch_given_params}
\alias{create_Xu_problem_from_scratch_given_params}
\title{Generate a Xu problem from scratch given parameters}
\usage{
create_Xu_problem_from_scratch_given_params(tot_num_nodes, num_nodes_per_group,
  n__num_groups, num_independent_nodes_per_group, max_possible_tot_num_links,
  target_num_links_between_2_groups_per_round,
  num_rounds_of_linking_between_groups, duplicate_links_allowed,
  max_allowed_num_spp, parameters, integerize)
}
\arguments{
\item{tot_num_nodes}{integer}

\item{num_nodes_per_group}{integer}

\item{n__num_groups}{integer}

\item{num_independent_nodes_per_group}{integer}

\item{max_possible_tot_num_links}{integer}

\item{target_num_links_between_2_groups_per_round}{integer}

\item{num_rounds_of_linking_between_groups}{integer}

\item{duplicate_links_allowed}{boolean (defaults to FALSE)}

\item{max_allowed_num_spp}{integer maximum number of species allowed in the
problem (to keep from generating problems that are too large when trying
to keep the run-time down)}

\item{parameters}{parameters list for the run, usually derived from project.yaml
and can have a varying number and set of elements depending on the run}

\item{integerize}{function to use in converting floats to ints}
}
\value{
Returns a PU_spp_pair_info_class object
}
\description{
Generate a Xu biodiversity problem based on a set of specific parameters
(not necessarily derived from derive_Xu_control_parameters()) passed in
rather than reading the problem from a file.  The purpose of this function
is to do the main work of building the problem once parameters have been
chosen.  It allows dependency injection for testing and it allows for
experiments that want to bypass the original Xu indirect creation pathway
that depends on the 4 values n, alpha, p, and r.
}
\details{
The 4 original Xu parameters are not necessary for deriving a problem and
its correct answer.  It is the values derived from them that are necessary
for building the problem (e.g., number of dependent nodes, etc.).  The code
in this function is where the actual building of the problem occurs.

In some cases, it may be more desirable in experimental setup to manipulate
the derived values directly, e.g., to make sure that a problem ends up
having a specific number of planning units or species, etc.
The 4 original parameters are most useful in theoretically motivating and
predicting where to look for problems with a given level of difficulty.
Once we can see the different regions of problem structure implied by
combinations of those parameters, then the values derived from them may be
easier to manipulate in search  algorithms and explanations, etc.
}
\seealso{
Other interfaces to creation of Xu problems: \code{\link{create_Xu_problem_from_scratch_given_4_Xu_metaparams}},
  \code{\link{create_Xu_problem_from_scratch_not_using_4_Xu_metaparams}},
  \code{\link{create_Xu_problem_from_scratch}}
}
