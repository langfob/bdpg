% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/write_marxan_input_files.R
\name{write_all_marxan_input_files}
\alias{write_all_marxan_input_files}
\title{Write all marxan input files}
\usage{
write_all_marxan_input_files(PU_IDs, spp_IDs, spp_PU_amount_table,
  targets = rep(1, length(spp_IDs)), costs = rep(1, length(PU_IDs)),
  spf_const = 1, status_const = 0)
}
\arguments{
\item{PU_IDs}{A vector of planning unit IDs}

\item{spp_IDs}{A vector of species IDs}

\item{spp_PU_amount_table}{A data frame of species IDs vs planning unit IDs}

\item{targets}{A vector of target representation levels for all species}

\item{costs}{A vector of costs for all PUs}

\item{spf_const}{A constant species penalty factor to be applied to all species}

\item{status_const}{A constant status to be applied to all species}
}
\value{
nothing.
}
\description{
Write all marxan input files except bound.dat and input.dat using constant values for individual elements.
}
\details{
The spp_PU_amount_table is expected to have 3 columns called (in left to
right order) "species",
"pu", and "amount".  Marxan requires this table to be sorted in increasing
order on the planning unit column.  I don't think the order within planning
unit matters on the
other columns.  See source code for the test function
\code{gen_random_spp_PU_amount_table} for an example of creating
this table.
}
\section{Local Variable Structures and examples}{

Here is the output of str() for each variable visible in the function.
Note that the particular counts and values given are just examples to show
what the data might look like.

\subsection{costs}{
\preformatted{
costs :  num [1:407] 1 1 1 1 1 1 1 1 1 1 ...
}}
\subsection{PU_IDs}{
\preformatted{
PU_IDs :  int [1:407] 1 2 3 4 5 6 7 8 9 10 ...
}}
\subsection{spf_const}{
\preformatted{
spf_const :  num 950
}}
\subsection{spp_IDs}{
\preformatted{
spp_IDs :  int [1:1277] 1 2 3 4 5 6 7 8 9 10 ...
}}
\subsection{spp_PU_amount_table}{
\preformatted{
spp_PU_amount_table : 'data.frame':	3037 obs. of  3 variables:
 $ species: num  1 1 65 88 139 215 227 256 259 262 ...
 $ pu     : num  1 2 2 2 2 2 2 2 2 2 ...
 $ amount : num  1 1 1 1 1 1 1 1 1 1 ...
}}
\subsection{status_const}{
\preformatted{
status_const :  num 0
}}
\subsection{targets}{
\preformatted{
targets :  num [1:1277] 1 1 1 1 1 1 1 1 1 1 ...
}}
}

\examples{
\dontrun{
num_PUs = 100
num_spp = 3
PU_IDs = 1:num_PUs
spp_IDs = 1:num_spp

spp_PU_amount_table = gen_random_spp_PU_amount_table (num_PUs, num_spp)

    #  Write all input files at once.
write_all_marxan_input_files (PU_IDs, spp_IDs, spp_PU_amount_table)

    #  Write each input file individually.
write_marxan_pu.dat_input_file (PU_IDs)
write_marxan_spec.dat_input_file (spp_IDs)
write_marxan_puvspr.dat_input_file (spp_PU_amount_table)
         }
}
