% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BDProb.R
\docType{class}
\name{Global_Constants_v01-class}
\alias{Global_Constants_v01-class}
\title{Class to hold global constants to avoid having to constantly pass them around}
\description{
There are a bunch of constant strings used for things like directory and
column names that are a pain in the ass to pass all up and down the call tree
or to duplicate in every copy of all class objects, so I'm going to do the
evil thing and make a global variable to store these global constants.  I
won't create the variable inside the bdpg package though.  That will need to
be done in the calling application.  See example below.
}
\section{Slots}{

\describe{
\item{\code{rsprob_PU_col_name}}{character string column name for planning unit IDs
in RSprob-related data frames.}

\item{\code{rsprob_spp_col_name}}{character string column name for species IDs in
RSprob-related data frames.}

\item{\code{rsprob_presences_col_name}}{character string column name for presence
counts in RSprob-related data.}

\item{\code{mss_frac_of_all_spp_meeting_their_tgt_col_name}}{character string
column name for the fractions of all species that meet their targets
in marxan_solution_costs data frames.}

\item{\code{mss_frac_of_total_landscape_cost_tgt_col_name}}{character string column
name for the fraction of the total landscape cost that each solution's
absolute cost reperesents in marxan_solutions_costs data frames.}

\item{\code{mss_solution_num_col_name}}{character string column name for the IDs of
each solution vector in marxan_solutions_costs data frames.}

\item{\code{rsprob_plot_output_dir}}{character string directory name for plot
output files in RSprob-related code.}

\item{\code{rsprob_network_output_dir}}{character string directory name for network
output files in RSprob-related code}

\item{\code{rsrun_input_dir_name}}{character string directory name for input files
in RSrun-related code}

\item{\code{rsrun_output_dir_name}}{character string directory name for run
output in RSrun-related code (e.g., marxan output files)}

\item{\code{rsrun_plot_dir_name}}{character string directory name for plot
output files in RSrun-related code}
}}

\section{Assumptions}{


\enumerate{
 \item{The values in this structure will only be set inside the prototype
     section of this class declaration, never in the user's code.}
 \item{There will be just one instance of this class in an application.}
 \item{The class definition is stable and should not change.  If it does
     need to change at some point, the version number at the end of the
     class name should be incremented, e.g., from Global_Constants_v01 to
     Global_Constants_v02.  This should make it clearer in the application
     what versions of the constants are being used.}
 }
}

\section{Why make a global?}{


When I don't do it this way and I pass these variables all over, they
make the code harder to read because they're fairly meaningless variables
handed all over the place for little utility. The only reasons for having
these values as variables at all (as opposed to hard-coding the strings), is
to make sure they're consistent in all occurrences of various structures and
to make it easy to change their values everywhere at once on the rare
occasions when I want to do that.
}

\examples{
\dontrun{
#  Note that this is now done indirectly by calling
#  create_global_constants(), which executes the following command:
# assign("GC", new ("Global_Constants_v01"), envir = .GlobalEnv)
}

}
\seealso{
\code{\link{create_global_constants}}
}
